package com.demo.Entity;
import jakarta.persistence.*; 
import jakarta.validation.constraints.NotBlank; 
import jakarta.validation.constraints.NotNull; 
import lombok.*; 
import java.math.BigDecimal; 

@Entity                 //Marks the class as a JPA entity, meaning it will be mapped to a database table
@Table(name = "items") //Specifies the table name in the database, if it's different from the class name (optional)
@Getter                 //Automatically generates getter methods for all fields
@Setter                 //Automatically generates setter methods for all fields
@NoArgsConstructor      //Generates a no-argument constructor (required for frameworks like JPA and Hibernate)
@AllArgsConstructor     //Generates a constructor with arguments for all fields (useful for object creation)
@Builder                //Enables the builder pattern for constructing instances of the class in a more readable way
public class Item 
{
    @Id //Marks this field as the primary key in the database
    @GeneratedValue(strategy = GenerationType.IDENTITY) //Automatically generates unique values for the primary key (usually for auto-incremented IDs)
    @Column(name = "iid")                               //Specifies the column name in the database
    private Long iid;                                   //Unique identifier for the item, typically auto-generated by the database

    @Column(name = "itemName")                          //Specifies the column name in the database
    @NotBlank(message = "Item name cannot be blank")    //Validates that the itemName field cannot be blank, provides a custom validation message
    private String itemName;                            //The name of the item, must not be blank

    @Column(name = "unitPrice")                         //Specifies the column name in the database
    @NotNull(message = "Unit price is mandatory")       //Validates that the unitPrice field cannot be null, provides a custom validation message
    private BigDecimal unitPrice;                       //Unit price of each item, using BigDecimal for accurate monetary calculations, avoiding floating-point precision issues
}